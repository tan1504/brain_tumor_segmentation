import streamlit as st
import numpy as np
import nibabel as nib
import cv2
from PIL import Image
import io
import tempfile
import os
from model_utils import load_model, predict_slice, IMG_SIZE, SEGMENT_CLASSES

st.title("­ЪДа Brain tumor segmentation")

model = load_model()

# Tр║Аo bр╗Ў tр║Бi file ─Љр╗Ѓ ngк░р╗Юi d├╣ng tр║Бi l├фn file р║Бnh FLAIR ─Љр╗Іnh dр║Аng .nii
uploaded_flair_file = st.file_uploader("Tр║Бi l├фn file р║Бnh FLAIR (.nii)", type=["nii"])

# Kiр╗Ѓm tra xem ngк░р╗Юi d├╣ng ─Љ├Б tр║Бi l├фn file hay chк░a
if uploaded_flair_file is not None:
    try:
        # ─љр╗Їc nр╗Ўi dung cр╗Дa file ─Љ├Б tр║Бi l├фn dк░р╗Џi dр║Аng bytes
        nifti_bytes = uploaded_flair_file.read()

        # Tр║Аo mр╗Ўt file tр║Аm tr├фn hр╗Є thр╗Љng ─Љр╗Ѓ lк░u nр╗Ўi dung file ─Љ├Б tр║Бi l├фn
        # ─љiр╗Ђu n├аy cр║Дn thiр║┐t v├г nibabel thк░р╗Юng l├аm viр╗Єc tр╗Љt nhр║Цt vр╗Џi ─Љк░р╗Юng dр║Фn file
        with tempfile.NamedTemporaryFile(suffix=".nii", delete=False) as tmp_file:
            tmp_file.write(nifti_bytes)
            temp_file_path = tmp_file.name

        # Hiр╗Ѓn thр╗І ─Љк░р╗Юng dр║Фn cр╗Дa file tр║Аm (cho mр╗Цc ─Љ├Гch debug nр║┐u cр║Дn)
        st.info(f"─љк░р╗Юng dр║Фn file tр║Аm: {temp_file_path}")

        # Kiр╗Ѓm tra xem file tр║Аm c├│ thр╗▒c sр╗▒ tр╗Њn tр║Аi tr├фn hр╗Є thр╗Љng hay kh├┤ng
        if not os.path.exists(temp_file_path):
            st.error(f"Lр╗Ќi: File tр║Аm kh├┤ng tр╗Њn tр║Аi tр║Аi {temp_file_path}")
            raise FileNotFoundError(f"File tр║Аm kh├┤ng tр╗Њn tр║Аi tр║Аi {temp_file_path}")

        # Sр╗Г dр╗Цng nibabel ─Љр╗Ѓ load dр╗» liр╗Єu р║Бnh NIfTI tр╗Ф file tр║Аm
        try:
            flair_data = nib.load(temp_file_path).get_fdata()
        except Exception as e:
            st.error(f"Lр╗Ќi khi load file NIfTI bр║▒ng nibabel: {e}")
            os.unlink(temp_file_path) # X├│a file tр║Аm nр║┐u xр║Бy ra lр╗Ќi khi load
            raise e

        # X├│a file tр║Аm sau khi ─Љ├Б load dр╗» liр╗Єu th├аnh c├┤ng v├аo bр╗Ў nhр╗Џ
        os.unlink(temp_file_path)

        # X├Аc ─Љр╗Іnh sр╗Љ lк░р╗Бng slice tр╗Љi ─Љa trong volume v├а cho ph├Еp ngк░р╗Юi d├╣ng chр╗Їn slice ─Љр╗Ѓ xem
        max_slice = flair_data.shape[2] - 1
        slice_index = st.slider("Chр╗Їn slice", 0, max_slice, flair_data.shape[2] // 2)

        # Sр╗Г dр╗Цng h├аm predict_slice tр╗Ф model_utils.py ─Љр╗Ѓ tiр╗Ђn xр╗Г l├й v├а dр╗▒ ─Љo├Аn tr├фn slice ─Љ├Б chр╗Їn
        prediction = predict_slice(model, flair_data[:, :, slice_index])
        predicted_mask = np.argmax(prediction, axis=-1) # Lр║Цy lр╗Џp c├│ x├Аc suр║Цt cao nhр║Цt cho mр╗Ќi pixel

        # Lр║Цy c├Аc k├фnh dр╗▒ ─Љo├Аn ri├фng lр║╗ cho tр╗Фng lр╗Џp khр╗Љi u
        core_pred = prediction[:, :, 1]
        edema_pred = prediction[:, :, 2]
        enhancing_pred = prediction[:, :, 3]

        # H├аm tр║Аo р║Бnh overlay (kр║┐t hр╗Бp р║Бnh nр╗Ђn v├а mask dр╗▒ ─Љo├Аn vр╗Џi m├аu v├а ─Љр╗Ў trong suр╗Љt)
        def create_overlay(background, mask, color=(255, 0, 0), alpha=0.5): # Thay ─Љр╗Ћi m├аu th├аnh Red v├а t─Ѓng ─Љр╗Ў trong suр╗Љt
            img = np.stack([background] * 3, axis=-1).astype(np.uint8) # Chuyр╗Ѓn р║Бnh nр╗Ђn th├аnh р║Бnh RGB
            overlay = np.zeros_like(img, dtype=np.uint8) # Tр║Аo mask overlay c├│ c├╣ng k├Гch thк░р╗Џc
            overlay[mask > 0] = color # G├Аn m├аu cho c├Аc pixel thuр╗Ўc v├╣ng mask
            return Image.blend(Image.fromarray(img), Image.fromarray(overlay), alpha) # Trр╗Ўn р║Бnh nр╗Ђn v├а overlay

        # Tiр╗Ђn xр╗Г l├й slice FLAIR ─Љр╗Ѓ hiр╗Ѓn thр╗І
        normalized_flair_slice = cv2.resize(flair_data[:, :, slice_index], (IMG_SIZE, IMG_SIZE)).astype(np.float32) / np.max(flair_data[:, :, slice_index]) if np.max(flair_data[:, :, slice_index]) > 0 else cv2.resize(flair_data[:, :, slice_index], (IMG_SIZE, IMG_SIZE)).astype(np.float32)
        flair_pil = Image.fromarray((normalized_flair_slice * 255).astype(np.uint8)).convert("RGB") # Chuyр╗Ѓn th├аnh ─Љр╗Іnh dр║Аng PIL ─Љр╗Ѓ hiр╗Ѓn thр╗І

        # Tр║Аo mask m├аu cho tр║Цt cр║Б c├Аc lр╗Џp dр╗▒ ─Љo├Аn
        all_classes_mask = np.zeros((IMG_SIZE, IMG_SIZE, 3), dtype=np.uint8)
        colors = [(255, 0, 0), (0, 0, 255), (255, 255, 0)] # Red, Blue, Yellow
        for i, color in enumerate(colors):
            all_classes_mask[predicted_mask == i + 1] = color
        all_classes_pil = Image.blend(flair_pil, Image.fromarray(all_classes_mask), 0.5) # T─Ѓng ─Љр╗Ў trong suр╗Љt

        # Tр║Аo overlay cho tр╗Фng lр╗Џp khр╗Љi u ri├фng lр║╗
        core_overlay_pil = create_overlay((normalized_flair_slice * 255).astype(np.uint8), predicted_mask == 1, color=(255, 0, 0)) # Red
        edema_overlay_pil = create_overlay((normalized_flair_slice * 255).astype(np.uint8), predicted_mask == 2, color=(0, 0, 255)) # Blue
        enhancing_overlay_pil = create_overlay((normalized_flair_slice * 255).astype(np.uint8), predicted_mask == 3, color=(255, 255, 0)) # Yellow

        # Hiр╗Ѓn thр╗І c├Аc h├гnh р║Бnh kр║┐t quр║Б tr├фn giao diр╗Єn Streamlit
        st.subheader("Predicted results")
        col1, col2, col3 = st.columns(3)
        col1.image(flair_pil, caption="Original image flair", use_container_width=True)
        col2.image(all_classes_pil, caption="All classes", use_container_width=True)
        col3.image(core_overlay_pil, caption=f"{SEGMENT_CLASSES[1]} Predicted", use_container_width=True)
        col1, col2, col3 = st.columns(3)
        col1.empty()
        col2.image(edema_overlay_pil, caption=f"{SEGMENT_CLASSES[2]} Predicted", use_container_width=True)
        col3.image(enhancing_overlay_pil, caption=f"{SEGMENT_CLASSES[3]} Predicted", use_container_width=True)

    except Exception as e:
        # Hiр╗Ѓn thр╗І th├┤ng b├Аo lр╗Ќi nр║┐u c├│ bр║Цt kр╗│ vр║Цn ─Љр╗Ђ n├аo xр║Бy ra trong qu├А tr├гnh xр╗Г l├й
        st.error(f"─љ├Б xр║Бy ra lр╗Ќi: {e}")


# Use "streamlit run app.py" in terminal to run :>>>>